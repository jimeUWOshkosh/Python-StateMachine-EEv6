        Steps(
            Assets.Area(   self.is_in('clonevat')                   ),
            Assets.Wallet( self.pay( self.real_price('cloning') ) ),
            Assets.Clone(  self.gestate( self.station_area() )    ),
        ) #STEPS


        Steps(
            Assets.Location( self.is_in_area('clonevat') ),
            Assets.Wallet(   self.price('cloning').pay(arg1)  ),
            Assets.Clone(   self.station_area().gestate(arg1) ),
        ) #STEPS

       Steps(
                   Assets.Area(     character().is_in('inn') ),
                   Assets.Wallet(   character().has_minimum_credits(bet_amount) ),
                   Assets.Location( character().arm_wrestle(npc) ),
                   Assets.Wallet(   character().add(bet_amount) ),
          FAILURE( Assets.Wallet(   character().remove(bet_amount)                 ),
          ALWAYS(  Assets.Wallet(   character().show_balance()                     ),
        ) #STEPS


    nested_dict = { 'event_type': 'find', 'stashed': {'item': key}}

    Steps(
      ASSERT( Location(  self.can_scavenge(station_area) )),
      ASSERT( Stats(     self.minimum_required( curr_stamina = stamina_cost,  focus = focus_cost ))),
              Location(  self.scavenge(         station_area = station_area,  key   = key        )),
      ALWAYS( Stats(     self.remove(           curr_stamina = stamina_cost ))),
              Stats(     self.remove(           focus        = focus_cost )),
              Inventory( inventory.add_item(    item         = key,           new_key = 'found'  )),
              Event(     self.store(            nested_dict)),
    ) #STEPS
